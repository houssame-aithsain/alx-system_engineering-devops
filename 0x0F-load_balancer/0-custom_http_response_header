#!/usr/bin/env bash
# This script is designed to set up a basic web server environment using Nginx.
# It performs installations, configures the firewall, sets permissions, and configures Nginx.

# Enable script debugging. Uncomment to see the script execution flow.
# set -x

# Update system and perform initial checks
echo -e "Updating and doing some minor checks...\n"

# Define a function to install packages if they are not already installed
function install() {
    # Check if the command exists
    command -v "$1" &> /dev/null

    # If the command does not exist, install the package
    if [ $? -ne 0 ]; then
        echo -e "	Installing: $1\n"
        sudo apt-get update -y -qq && \
            sudo apt-get install -y "$1" -qq
        echo -e "\n"
    else
        echo -e "	${1} is already installed.\n"
    fi
}

# Install Nginx
install nginx

echo -e "\nSetting up some minor stuff.\n"

# Allow Nginx traffic through the firewall
sudo ufw allow 'Nginx HTTP'

# Check if /var/www directory exists, if not, create it and set permissions
if [ -d "/var/www" ]; then
    sudo chown -R "$USER":"$USER" /var/www
    sudo chmod -R 755 /var/www
else
    sudo mkdir -p /var/www
    sudo chown -R "$USER":"$USER" /var/www
    sudo chmod -R 755 /var/www
fi

# Create necessary directories if they do not exist
for dir in /var/www/{html,error}; do
    if ! [ -d "$dir" ]; then
        mkdir -p "$dir"
    fi
done

# Create a new index.html file
echo "Hello World!" > /var/www/html/index.html

# Create a new custom error page
echo "Ceci n'est pas une page" > /var/www/html/error_404.html

# Backup the default Nginx server configuration file
sudo cp /etc/nginx/sites-enabled/default nginx-sites-enabled_default.backup

# Define the new server configuration
server_config=\
"server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html;
        index index.html index.htm index.nginx-debian.html;
        server_name _;
        add_header X-Served-By \$hostname;
        location / {
            try_files \$uri \$uri/ =404;
        }
        # Custom rule for redirecting certain requests
        if (\$request_filename ~ redirect_me){
            rewrite ^ https://google.com/ permanent;
        }
        # Custom error page configuration
        error_page 404 /error_404.html;
        location = /error_404.html {
            internal;
        }
}"

# Apply the new server configuration
echo "$server_config" | sudo dd status=none of=/etc/nginx/sites-enabled/default

# Start or restart Nginx to apply changes
if [ "$(pgrep -c nginx)" -le 0 ]; then
    sudo service nginx start
else
    sudo service nginx restart
fi
